package view;
import control.GameController;
import java.text.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.JButton;
import newtictactoe.Tictac;
import view.MainWindow;
import view.TopPanel;
public class GameBoard  extends GamePanel implements ActionListener{
	TopPanel tp=new TopPanel(gc);
	JButton[] buttons = new JButton[9];
    Tictac tic=new Tictac();
	int row	;
	public boolean highlighted;
	public static final int CELL_PADDING = 10;
	public GameBoard(GameController gc) {

		super(gc);	
		jbuttonsSize();
		this.setLayout(null);
		setSize(new Dimension(MainWindow.WIDTH-2*MainWindow.PLAYER_WIDTH, MainWindow.HEIGHT-MainWindow.TOP_HEIGHT));		
		this.setLayout(new GridLayout(3,3));
		this.setBackground(new Color(150,150,150));
		for(int i=0;i<9;i++) {
            buttons[i] = new JButton(Integer.toString(i+1));
            this.add(buttons[i]);
            buttons[i].setFont(new Font("MV Boli",Font.BOLD,0));
			buttons[i].setFocusable(true);
			buttons[i].addActionListener((e)->{checkGame(e);});
		}
	}
	

	public void checkGame(ActionEvent e) {
      	String winner = null;
		String mark="X";	        

	 for(int i=0;i<9;i++)
	 {if(e.getSource().equals(buttons[i])) {     
		 if((buttons[i].getText()!="X")&& (buttons[i].getText()!="O"))	
{ 
		   buttons[i].setForeground(Color.BLACK);
           buttons[i].setFont(new Font("MV Boli",Font.BOLD,150));		
           buttons[i].setText(mark);
}
	
	}
		 
		     winner =tic.convertor(gc.getModel().getGamePlayers()[0], gc.getModel().getGamePlayers()[1], buttons);
	         mark= getModel().ChangeMoverMark(mark);	        
 	if((winner==("X")))
 	{	break;}
 	else 
 	if((winner==("O"))) 
 	break;
 	
 	else	
 	{continue;}     
	
	 }
		

 tp.winnerLab(tp.winnertext,winner,gc.getModel().getGamePlayers()[0],gc.getModel().getGamePlayers()[1]); 
}
     
	
	
	private int jbuttonsSize() {
		int minDim = Integer.min(this.getWidth(),this.getHeight());
		return minDim/5;
	}
	
	private int boardSize() {
		return 3*jbuttonsSize();
	}
	
	private Point boardZero() {
		int x= (this.getWidth() - boardSize())/2;
		int y= (this.getHeight() - boardSize())/2;
		return new Point(x,y);
	}

	
	
	public void drawGrid(Graphics g) {
		Graphics2D g2d = (Graphics2D)g;
		g2d.setStroke(new BasicStroke(6));
		for (int i=1; i<3; i++) {
			//Draw Vertical Line
			g2d.drawLine(
					boardZero().x +i*jbuttonsSize(),boardZero().y, 				// i-based x,  	upperLeft.y 
					boardZero().x+i*jbuttonsSize(),boardZero().y+boardSize() 	// i-based x,	boardBottom.y (boardBottom = y + boardSize)
					);
			
			//Draw Horizontal Line
			g2d.drawLine(
					boardZero().x,  boardZero().y+i*jbuttonsSize(), 			// upperLeft.x, i-based y
					boardZero().x+boardSize(), boardZero().y+i*jbuttonsSize()	// boardRight.x, i-based y (boardRight = x + boardSize)
					);
		}
		
	}


	
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		//this.setBorder(new LineBorder(Color.DARK_GRAY, 1));
		String mark = getModel().getBoardMark(this.row);
		Graphics2D g2d = (Graphics2D) g;
		int size = this.getSize().width - 2 * CELL_PADDING;
		g2d.setStroke(new BasicStroke(6));
		if (mark == null) {
			if (highlighted) {
				g2d.setColor(Color.black);
				g2d.fillRect(CELL_PADDING, CELL_PADDING, size, size);
			}
			return;
		} else if (mark.equals("X")) {
			g2d.drawLine(CELL_PADDING, CELL_PADDING, CELL_PADDING + size, CELL_PADDING + size);
			g2d.drawLine(CELL_PADDING + size, CELL_PADDING, CELL_PADDING, CELL_PADDING + size);
		} else {
			g2d.drawOval(CELL_PADDING, CELL_PADDING, size, size);
		}
	}


	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
	}

	
}
