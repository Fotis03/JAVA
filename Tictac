package model;

import control.GameController;
import model.PlayersCatalogue;
public class GameModel {
	
	PlayersCatalogue playerCatalogue=new PlayersCatalogue();
	String[] gamePlayers;		
	String[] gameBoard;
	GameController gc;
	Boolean mover;
	
	public GameModel(GameController gc) {
		this.gc=gc;
		gamePlayers = new String[2];
		gameBoard= null;

		mover=true;
	}
	void checkDimValidity(int row) {
		if (row <0 || row > 9 ) {
			throw new IndexOutOfBoundsException(row +  " is not a valid board cell");
		}
	}
	
	public void checkMoveValidity(int row) {
		checkDimValidity(row);
		if (gameBoard[row]!=null) {
			throw new IllegalArgumentException("Non playable cell");
		}
	}
	
	public String getBoardMark(int row) {
		checkMoveValidity(row);
		return gameBoard[row];
	}
	

	
	public String ChangeMoverMark(String mark) {
		if (mark.equals("X"))
		{
			mark="O" ;
		}
			else
		if (mark.equals("O"))
		{	
			mark="X";
		}
		return mark;}
	

		public void selectPlayer(String selPlayer, int pos) {
		if (pos<0 && pos>1)return;
		gamePlayers[pos]=selPlayer;		
	}
	
	public boolean ready() {
		return (gamePlayers[0] != null && gamePlayers[1] !=null);
	}
		
	public void startGame() {
		gameBoard= new String[9];
	}
	
	public boolean inPlay() {
		return gameBoard !=null;
	}
	
	public boolean NoPlay() {
		return !inPlay();
	}
	
	public String[] getGamePlayers() {
		return gamePlayers;
	}

	public PlayersCatalogue getPlayerCatalogue() {
return playerCatalogue;
	}
	public String[] getGameBoard() {
		return gameBoard;
	}

	public void setGameBoard(String[] gameBoard) {
		this.gameBoard = gameBoard;
	}


	
	public String getPlayerStats(String player) {
		StringBuilder sb = new StringBuilder("");
		sb.append(player).append("\n\n\n");
		sb.append("Total:").append("\t").append(4).append("\n");
		sb.append("Won:").append("\t").append("75%").append("\n");
		sb.append("Lost:").append("\t").append("25%").append("\n");
		return sb.toString();			
	}
		

public String[] change(String[][] gameboard) {
String board[]=new String[9];
board[0]=gameboard[0][0];
board[1]=gameboard[0][1];
board[2]=gameboard[0][2];
board[3]=gameboard[1][0];
board[4]=gameboard[1][1];
board[5]=gameboard[1][2];
board[6]=gameboard[2][0];
board[7]=gameboard[2][1];
board[8]=gameboard[2][2];
return board;}
public int change2 (int row,int col) {
	  int positions;
	if(row==0&&col==0)positions=1;
	else
	if (row==0&&col==1) positions=2;
	else
	if (row==0&&col==2) positions=3;
	else
	if (row==1&&col==0) positions=4;
	else
	if (row==1&&col==1) positions=5;
	else
	if (row==1&&col==2) positions=6;
	else
	if (row==2&&col==0) positions=7;
	else
	if(row==2&&col==1) positions=8;
	else
	if (row==2&&col==2) positions=0;
	else positions=0;	
return positions;

}}
